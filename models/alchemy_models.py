from fastapi_users.db import SQLAlchemyBaseUserTableUUID
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, TIMESTAMP, Integer, Table, Boolean, Time, String, JSON
from sqlalchemy.dialects.postgresql import UUID
from uuid import uuid4
from datetime import datetime

Base = declarative_base()


class Seauser(SQLAlchemyBaseUserTableUUID, Base):
    __tablename__ = 'sea_user'
    # ========Fast Api Users set up fields=====#
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4) #Autogenerated uuid
    email = Column(String, unique=True, index=True, nullable=False) #Manual input from frontend
    is_active = Column(Boolean, default=False) #BL manipulation flag
    is_verified = Column(Boolean, default=False) #BL manipulation flag
    is_superuser = Column(Boolean, default=False) #Manual set from admin
    hashed_password = Column(String, nullable=False) #BL manipulation data

    # =====Custom fields===================#
    first_name = Column(String, nullable=True) #Manual input from frontend
    last_name = Column(String, nullable=True) #Manual input from frontend
    age = Column(Integer, nullable=True, default=18) #Manual input from frontend
    nick_name = Column(String, nullable=True, unique=True, index=True) #Manual input from frontend
    position = Column(String, nullable=True, default="user") #BL manipulation data
    experience = Column(JSON, nullable=True) #Manual input from frontend
    status = Column(String, nullable=True, default="regestration") #BL manipulation data
    avatar = Column(String, nullable=True, default="") #BL manipulation data
    is_author = Column(Boolean, default=False) #BL manipulation data
    registred = Column(TIMESTAMP, default=datetime.utcnow, nullable=False) #Autogenerated datestamp
    about = Column(String, nullable=True, default="") #Manual input from frontend
    head_line = Column(String, nullable=True, default="Hi! Now I'm on seawolves.") #Manual input from frontend

    # =====Relationships=========================
    posts = relationship('Post', backref='author')
    faqs = relationship('Faq', backref='author')
    news = relationship('News', backref='author')
    calendar = relationship('Calendar', back_populates='seauser')


class Calendar(Base):
    __tablename__ = 'calendar'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id = Column(UUID(as_uuid=True), ForeignKey('sea_user.id'))
    calendar_name = Column(String, nullable=True, default="")
    meets = relationship('Meet', back_populates='calendar')
    seauser = relationship('Seauser', back_populates='calendar')


class Meet(Base):
    __tablename__ = 'meet'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    calendar_id = Column(UUID(as_uuid=True), ForeignKey('calendar.id'))
    guest_id = Column(UUID(as_uuid=True))
    date_of_meet = Column(TIMESTAMP, nullable=False)
    time_of_meet_start = Column(Time, nullable=False)
    time_of_meet_end = Column(Time, nullable=False)
    link_to_Google_Meet = Column(String)

    meet_title = Column(String, nullable=True, default="Default meet")
    meet_agenda = Column(String, nullable=True, default="Default agenda meet")

    calendar = relationship('Calendar', back_populates='meets')


# =======Associations Tables: Many-to-Many=====================#
post_tags_association = Table('Post_tags', Base.metadata,
                              Column('post_id', UUID(as_uuid=True), ForeignKey('post.id')),
                              Column('tag_id', UUID(as_uuid=True), ForeignKey('tag.id'))
                              )

faq_tags_association = Table('Faq_tags', Base.metadata,
                             Column('faq_id', UUID(as_uuid=True), ForeignKey('faq.id')),
                             Column('tag_id', UUID(as_uuid=True), ForeignKey('tag.id')))

news_tags_association = Table('News_tags', Base.metadata,
                              Column('news_id', UUID(as_uuid=True), ForeignKey('news.id')),
                              Column('tag_id', UUID(as_uuid=True), ForeignKey('tag.id')))


# ================================================================#
class Post(Base):
    __tablename__ = 'post'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    # =========Main options==============
    author_id = Column(UUID(as_uuid=True), ForeignKey('sea_user.id'), nullable=False)
    title = Column(String, nullable=False)
    tech_title = Column(String, unique=True, nullable=False)
    preview = Column(String, nullable=False)
    category_id = Column(UUID(as_uuid=True), ForeignKey('category.id'))
    body_path = Column(String, nullable=False)
    created = Column(TIMESTAMP, default=datetime.utcnow, nullable=False)
    draft = Column(Boolean, default=True, nullable=True)
    cover = Column(String, default="", nullable=True)
    # ==========Metrics=================
    views = Column(Integer, nullable=True)
    likes = Column(Integer, nullable=True)
    dislikes = Column(Integer, nullable=True)
    comments_counter = Column(Integer, nullable=True)

    # ====Relationships======================
    comments = relationship('Comment', back_populates='post')
    category = relationship('Category', back_populates='posts')
    tags = relationship('Tag', secondary=post_tags_association, back_populates='posts')


class Comment(Base):
    __tablename__ = 'comment'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    post_id = Column(UUID(as_uuid=True), ForeignKey('post.id'))
    author_id = Column(UUID(as_uuid=True), nullable=False)
    body = Column(String, nullable=False)
    created = Column(TIMESTAMP, default=datetime.utcnow, nullable=False)

    post = relationship('Post', back_populates='comments')


class Category(Base):
    __tablename__ = 'category'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    name = Column(String, unique=True, nullable=False)

    posts = relationship('Post', back_populates='category')
    tags = relationship('Tag', back_populates='category')
    faqs = relationship('Faq', back_populates='category')
    news = relationship('News', back_populates='category')


class Tag(Base):
    __tablename__ = 'tag'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    name = Column(String, unique=True, nullable=False)
    category_id = Column(UUID(as_uuid=True), ForeignKey('category.id'))

    category = relationship('Category', back_populates='tags')
    posts = relationship('Post', secondary=post_tags_association, back_populates='tags')
    faqs = relationship('Faq', secondary=faq_tags_association, back_populates='tags')
    news = relationship('News', secondary=news_tags_association, back_populates='tags')


class Faq(Base):
    __tablename__ = 'faq'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    # =========Main options==============
    author_id = Column(UUID(as_uuid=True), ForeignKey('sea_user.id'), nullable=False)
    title = Column(String, nullable=False)
    tech_title = Column(String, unique=True, nullable=False)
    category_id = Column(UUID(as_uuid=True), ForeignKey('category.id'))
    body_path = Column(String, nullable=False)
    created = Column(TIMESTAMP, default=datetime.utcnow, nullable=False)
    draft = Column(Boolean, default=True, nullable=True)

    # ==========Metrics=================
    views = Column(Integer, nullable=True)
    likes = Column(Integer, nullable=True)
    dislikes = Column(Integer, nullable=True)

    # ====Relationships======================
    category = relationship('Category', back_populates='faqs')
    tags = relationship('Tag', secondary=faq_tags_association, back_populates='faqs')


class News(Base):
    __tablename__ = 'news'
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    # =========Main options==============
    author_id = Column(UUID(as_uuid=True), ForeignKey('sea_user.id'), nullable=False)
    title = Column(String, nullable=False)
    tech_title = Column(String, unique=True, nullable=False)
    category_id = Column(UUID(as_uuid=True), ForeignKey('category.id'))
    body_path = Column(String, nullable=False)
    created = Column(TIMESTAMP, default=datetime.utcnow, nullable=False)
    draft = Column(Boolean, default=True, nullable=True)

    # ==========Metrics=================
    views = Column(Integer, nullable=True)
    likes = Column(Integer, nullable=True)
    dislikes = Column(Integer, nullable=True)

    # ====Relationships======================
    category = relationship('Category', back_populates='news')
    tags = relationship('Tag', secondary=news_tags_association, back_populates='news')